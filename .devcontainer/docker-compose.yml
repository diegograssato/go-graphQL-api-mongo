services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ../:/workspace
      #- ../..:/workspaces:cached
      # Docker socket to access Docker server
      - /var/run/docker.sock:/var/run/docker.sock
      # SSH directory for Linux, OSX and WSL
      # On Linux and OSX, a symlink /mnt/ssh <-> ~/.ssh is
      # created in the container. On Windows, files are copied
      # from /mnt/ssh to ~/.ssh to fix permissions.
      #- ~/.ssh:/mnt/ssh
      # Shell history persistence
      #- ~/.zsh_history:/root/.zsh_history
      # Git config
      - ~/.gitconfig:/home/diego/.gitconfig
    env_file:
      - .env # Loads the .env file to provide the environment varable
    environment:
      - TZ=America/Sao_Paulo
    cap_add:
      # For debugging with dlv
      - SYS_PTRACE
    security_opt:
      # For debugging with dlv
      - seccomp:unconfined
    entrypoint: [ "zsh", "-c", "while sleep 1000; do :; done" ]
    network_mode: service:mongo # Make sure the app runs on the same as the database container

  mongo:
    image: mongo
    env_file:
      - .env # Loads the .env file to provide the environment varable
    volumes:
      # seeding scripts
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      # named volumes
      - mongodb:/data/db
    #command: [--auth]

  mongo-express:
    image: mongo-express
    ports:
      - 8081:8081
    env_file:
      - .env # Loads the .env file to provide the environment varable
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_BASICAUTH: false
volumes:
  mongodb: